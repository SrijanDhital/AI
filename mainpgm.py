# -*- coding: utf-8 -*-
"""mainPGM.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hH4kKMjN-mAsSoZd1yiD0_Yk3cKTNEGL
"""

#before the program is run place all the project files in the same folder

#import all the necessary libraries
from keras.models import load_model
from time import sleep
from keras.preprocessing.image import img_to_array
from keras.preprocessing import image
from cv2 import cv2
import numpy as np

#use this directory of google drive when the program is being run from google colab
# project_dir = 'drive/MyDrive/Colab Notebooks/'

#use the directory below of local storage when running locally (from Jupyter or else)
project_dir = ''

face_detector = cv2.CascadeClassifier(project_dir+'haarcascade_frontalface_default.xml')
model = load_model(project_dir+'model.h5')

# Define a list for storing the emotions based on their index from dataset fer2013
emotions = ['Angry','Disgust','Fear','Happy','Sad','Surprise','Neutral']

#open the camera and start video capture
start_capture = cv2.VideoCapture(0)

while True:
    _, frame = start_capture.read()
    labels = []
    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    faces = face_detector.detectMultiScale(gray)

    for (x,y,w,h) in faces:
        cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,255),2)
        roi_gray = gray[y:y+h,x:x+w]
        roi_gray = cv2.resize(roi_gray,(48,48),interpolation=cv2.INTER_AREA)



        if np.sum([roi_gray])!=0:
            roi = roi_gray.astype('float')/255.0
            roi = img_to_array(roi)
            roi = np.expand_dims(roi,axis=0)

            prediction = model.predict(roi)[0]
            label=emotions[prediction.argmax()]
            label_position = (x,y)
            cv2.putText(frame,label,label_position,cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)
        else:
            cv2.putText(frame,'No Faces',(30,80),cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)
    cv2.imshow('Emotion Detector',frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

start_capture.release()
cv2.destroyAllWindows()